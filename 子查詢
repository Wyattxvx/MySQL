#1.UNION的使用

/* 練習1 */
Employees table:
+-------------+----------+
| employee_id | name     |
+-------------+----------+
| 2           | Crew     |
| 4           | Haven    |
| 5           | Kristian |
+-------------+----------+
Salaries table:
+-------------+--------+
| employee_id | salary |
+-------------+--------+
| 5           | 76071  |
| 1           | 22517  |
| 4           | 63539  |
+-------------+--------+
Write an SQL query to report the IDs of all the employees with missing information. The information of an employee is missing if:
The employee's name is missing, or
The employee's salary is missing.
Return the result table ordered by employee_id in ascending order.

SELECT t.employee_id
FROM (select * from employees LEFT JOIN salaries using(employee_id)
UNION
SELECT * from employees RIGHT JOIN salaries using(employee_id))as t
WHERE t.salary is null or t.name is null
ORDER BY  employee_id
--------------------------------------------------------------------------
/* 練習2 */
Products table:
+------------+--------+--------+--------+
| product_id | store1 | store2 | store3 |
+------------+--------+--------+--------+
| 0          | 95     | 100    | 105    |
| 1          | 70     | null   | 80     |
+------------+--------+--------+--------+
Write an SQL query to rearrange the Products table so that each row has (product_id, store, price). 
If a product is not available in a store, do not include a row with that product_id and store combination in the result table.
Return the result table in any order.

SELECT product_id,'store1' as store,store1 as price FROM products WHERE store1 is not null
UNION
SELECT product_id,'store2' as store,store2 as price FROM products WHERE store2 is not null
UNION
SELECT product_id,'store3' as store,store3 as price FROM products WHERE store3 is not null
