#基礎條件查詢

/*練習1 */
World table:
+-------------+-----------+---------+------------+--------------+
| name        | continent | area    | population | gdp          |
+-------------+-----------+---------+------------+--------------+
| Afghanistan | Asia      | 652230  | 25500100   | 20343000000  |
| Albania     | Europe    | 28748   | 2831741    | 12960000000  |
| Algeria     | Africa    | 2381741 | 37100000   | 188681000000 |
| Andorra     | Europe    | 468     | 78115      | 3712000000   |
| Angola      | Africa    | 1246700 | 20609294   | 100990000000 |
+-------------+-----------+---------+------------+--------------+
A country is big if:
it has an area of at least three million (i.e., 3000000 km2), or it has a population of at least twenty-five million (i.e., 25000000).
Write an SQL query to report the name, population, and area of the big countries.
Return the result table in any order.

SELECT name,population,area
FROM world
WHERE area>=3000000 or population>=25000000


/* 練習2 */
Products table:
+-------------+----------+------------+
| product_id  | low_fats | recyclable |
+-------------+----------+------------+
| 0           | Y        | N          |
| 1           | Y        | Y          |
| 2           | N        | Y          |
| 3           | Y        | Y          |
| 4           | N        | N          |
+-------------+----------+------------+
Write an SQL query to find the ids of products that are both low fat and recyclable.
Return the result table in any order.

SELECT product_id
FROM products
WHERE low_fats='Y' and recyclable='Y' 


/* 練習3 */
Customer table:
+----+------+------------+
| id | name | referee_id |
+----+------+------------+
| 1  | Will | null       |
| 2  | Jane | null       |
| 3  | Alex | 2          |
| 4  | Bill | null       |
| 5  | Zack | 1          |
| 6  | Mark | 2          |
+----+------+------------+
Write an SQL query to report the names of the customer that are not referred by the customer with id = 2.
Return the result table in any order.

SELECT name
FROM customer
WHERE referee_id is null or referee_id!=2
---------------------------------------------------------------------------------------------------------------------------------------------
#模糊查詢

/* 練習1 */
Patients table:
+------------+--------------+--------------+
| patient_id | patient_name | conditions   |
+------------+--------------+--------------+
| 1          | Daniel       | YFEV COUGH   |
| 2          | Alice        |              |
| 3          | Bob          | DIAB100 MYOP |
| 4          | George       | ACNE DIAB100 |
| 5          | Alain        | DIAB201      |
+------------+--------------+--------------+
Write an SQL query to report the patient_id, patient_name and conditions of the patients who have Type I Diabetes. Type I Diabetes always starts with DIAB1 prefix.Return the result table in any order.

SELECT *
FROM patients
WHERE conditions like '% DIAB1%' or conditions like 'DIAB1%'
---------------------------------------------------------------------------------------------------------------------------------------------
#排序查詢

/* 練習1 */
Employees table:
+-------------+---------+--------+
| employee_id | name    | salary |
+-------------+---------+--------+
| 2           | Meir    | 3000   |
| 3           | Michael | 3800   |
| 7           | Addilyn | 7400   |
| 8           | Juan    | 6100   |
| 9           | Kannon  | 7700   |
+-------------+---------+--------+
Write an SQL query to calculate the bonus of each employee. 
The bonus of an employee is 100% of their salary if the ID of the employee is an odd number and the employee name does not start with the character 'M'. 
The bonus of an employee is 0 otherwise.
Return the result table ordered by employee_id.

SELECT employee_id,(case when employee_id%2=1 and name not like 'M%' then salary else 0 end)as bonus
FROM employees
ORDER BY employee_id asc


/* 練習2 */
Users table:
+---------+-------+
| user_id | name  |
+---------+-------+
| 1       | aLice |
| 2       | bOB   |
+---------+-------+
Write an SQL query to fix the names so that only the first character is uppercase and the rest are lowercase.
Return the result table ordered by user_id.

SELECT user_id,concat(upper(substr(name,1,1)),lower(substr(name,2)))as name
FROM users
ORDER BY user_id
---------------------------------------------------------------------------------------------------------------------------------------------
#分組查詢

/* 練習1 */
DailySales table:
+-----------+-----------+---------+------------+
| date_id   | make_name | lead_id | partner_id |
+-----------+-----------+---------+------------+
| 2020-12-8 | toyota    | 0       | 1          |
| 2020-12-8 | toyota    | 1       | 0          |
| 2020-12-8 | toyota    | 1       | 2          |
| 2020-12-7 | toyota    | 0       | 2          |
| 2020-12-7 | toyota    | 0       | 1          |
| 2020-12-8 | honda     | 1       | 2          |
| 2020-12-8 | honda     | 2       | 1          |
| 2020-12-7 | honda     | 0       | 1          |
| 2020-12-7 | honda     | 1       | 2          |
| 2020-12-7 | honda     | 2       | 1          |
+-----------+-----------+---------+------------+
Write an SQL query that will, for each date_id and make_name, return the number of distinct lead_id's and distinct partner_id's.
Return the result table in any order.

SELECT date_id,make_name,count(distinct lead_id)as unique_leads,count(distinct partner_id)as unique_partners
FROM dailysales
GROUP BY date_id,make_name


/* 練習2 */
Followers table:
+---------+-------------+
| user_id | follower_id |
+---------+-------------+
| 0       | 1           |
| 1       | 0           |
| 2       | 0           |
| 2       | 1           |
+---------+-------------+
Write an SQL query that will, for each user, return the number of followers.
Return the result table ordered by user_id in ascending order.

SELECT user_id,count(follower_id)as followers_count
FROM followers
GROUP BY user_id
ORDER BY user_id asc


/* 練習3 */
Orders table:
+--------------+-----------------+
| order_number | customer_number |
+--------------+-----------------+
| 1            | 1               |
| 2            | 2               |
| 3            | 3               |
| 4            | 3               |
+--------------+-----------------+
Write an SQL query to find the customer_number for the customer who has placed the largest number of orders.
The test cases are generated so that exactly one customer will have placed more orders than any other customer.

SELECT customer_number
FROM orders
GROUP BY customer_number
ORDER BY COUNT(order_number) DESC LIMIT 1
---------------------------------------------------------------------------------------------------------------------------------------------
#UNION的使用

/* 練習1 */
Products table:
+------------+--------+--------+--------+
| product_id | store1 | store2 | store3 |
+------------+--------+--------+--------+
| 0          | 95     | 100    | 105    |
| 1          | 70     | null   | 80     |
+------------+--------+--------+--------+
Write an SQL query to rearrange the Products table so that each row has (product_id, store, price). 
If a product is not available in a store, do not include a row with that product_id and store combination in the result table.
Return the result table in any order.

SELECT product_id,'store1' as store,store1 as price FROM products WHERE store1 is not null
UNION
SELECT product_id,'store2' as store,store2 as price FROM products WHERE store2 is not null
UNION
SELECT product_id,'store3' as store,store3 as price FROM products WHERE store3 is not null
---------------------------------------------------------------------------------------------------------------------------------------------

