/* 練習1 */
Employees table:
+-------------+----------+
| employee_id | name     |
+-------------+----------+
| 2           | Crew     |
| 4           | Haven    |
| 5           | Kristian |
+-------------+----------+
Salaries table:
+-------------+--------+
| employee_id | salary |
+-------------+--------+
| 5           | 76071  |
| 1           | 22517  |
| 4           | 63539  |
+-------------+--------+
Write an SQL query to report the IDs of all the employees with missing information. The information of an employee is missing if:
The employee's name is missing, or
The employee's salary is missing.
Return the result table ordered by employee_id in ascending order.

SELECT t.employee_id
FROM (select * from employees LEFT JOIN salaries using(employee_id)
UNION
SELECT * from employees RIGHT JOIN salaries using(employee_id))as t
WHERE t.salary is null or t.name is null
ORDER BY  employee_id


/* 練習2 */
MyNumbers table:
+-----+
| num |
+-----+
| 8   |
| 8   |
| 3   |
| 3   |
| 1   |
| 4   |
| 5   |
| 6   |
+-----+
A single number is a number that appeared only once in the MyNumbers table.
Write an SQL query to report the largest single number. If there is no single number, report null.

SELECT MAX(num) as num
FROM (
	SELECT num
	FROM mynumbers
	GROUP BY num
	HAVING COUNT(*) = 1
) t


/* 練習3 */
Activity table:
+-----------+-----------+------------+--------------+
| player_id | device_id | event_date | games_played |
+-----------+-----------+------------+--------------+
| 1         | 2         | 2016-03-01 | 5            |
| 1         | 2         | 2016-05-02 | 6            |
| 2         | 3         | 2017-06-25 | 1            |
| 3         | 1         | 2016-03-02 | 0            |
| 3         | 4         | 2018-07-03 | 5            |
+-----------+-----------+------------+--------------+
Write an SQL query to report the device that is first logged in for each player.
Return the result table in any order.

SELECT player_id,device_id
FROM activity
WHERE (player_id,event_date) IN (SELECT player_id,MIN(event_date) FROM activity GROUP BY player_id)


/* 練習4 */
Product table:
+------------+--------------+------------+
| product_id | product_name | unit_price |
+------------+--------------+------------+
| 1          | S8           | 1000       |
| 2          | G4           | 800        |
| 3          | iPhone       | 1400       |
+------------+--------------+------------+
Sales table:
+-----------+------------+----------+------------+----------+-------+
| seller_id | product_id | buyer_id | sale_date  | quantity | price |
+-----------+------------+----------+------------+----------+-------+
| 1         | 1          | 1        | 2019-01-21 | 2        | 2000  |
| 1         | 2          | 2        | 2019-02-17 | 1        | 800   |
| 2         | 2          | 3        | 2019-06-02 | 1        | 800   |
| 3         | 3          | 4        | 2019-05-13 | 2        | 2800  |
+-----------+------------+----------+------------+----------+-------+
Write an SQL query that reports the best seller by total sales price, If there is a tie, report them all.
Return the result table in any order.

SELECT seller_id
FROM sales
GROUP BY seller_id
HAVING SUM(price)>=ALL(SELECT SUM(price) FROM sales GROUP BY seller_id)
